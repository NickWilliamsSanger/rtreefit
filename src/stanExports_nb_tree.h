// Generated by rstantools.  Do not edit by hand.

/*
    rtreefit is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rtreefit is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with rtreefit.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_nb_tree_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_nb_tree");
    reader.add_event(157, 155, "end", "model_nb_tree");
    return reader;
}
template <typename T0__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T0__, T3__, T4__>::type
x_to_t2(const std::vector<T0__>& x,
            const std::vector<int>& parentidx,
            const std::vector<int>& xidx,
            const std::vector<T3__>& tip_min_age,
            const std::vector<T4__>& t,
            const int& i, std::ostream* pstream__);
template <typename T0__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T0__, T3__, T4__>::type
x_to_t2(const std::vector<T0__>& x,
            const std::vector<int>& parentidx,
            const std::vector<int>& xidx,
            const std::vector<T3__>& tip_min_age,
            const std::vector<T4__>& t,
            const int& i, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T3__, T4__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 9;
        local_scalar_t__ factor(DUMMY_VAR__);
        (void) factor;  // dummy to suppress unused var warning
        stan::math::initialize(factor, DUMMY_VAR__);
        stan::math::fill(factor, DUMMY_VAR__);
        current_statement_begin__ = 10;
        if (as_bool(logical_gte(get_base1(t, i, "t", 1), 0))) {
            current_statement_begin__ = 11;
            return stan::math::promote_scalar<fun_return_scalar_t__>(get_base1(t, i, "t", 1));
        }
        current_statement_begin__ = 13;
        if (as_bool(logical_lt(get_base1(parentidx, i, "parentidx", 1), 1))) {
            current_statement_begin__ = 14;
            if (as_bool(logical_lt(get_base1(xidx, i, "xidx", 1), 1))) {
                current_statement_begin__ = 16;
                return stan::math::promote_scalar<fun_return_scalar_t__>(get_base1(tip_min_age, i, "tip_min_age", 1));
            } else {
                current_statement_begin__ = 19;
                return stan::math::promote_scalar<fun_return_scalar_t__>((get_base1(x, get_base1(xidx, i, "xidx", 1), "x", 1) * get_base1(tip_min_age, i, "tip_min_age", 1)));
            }
        } else {
            {
            current_statement_begin__ = 22;
            local_scalar_t__ tmp(DUMMY_VAR__);
            (void) tmp;  // dummy to suppress unused var warning
            stan::math::initialize(tmp, DUMMY_VAR__);
            stan::math::fill(tmp, DUMMY_VAR__);
            stan::math::assign(tmp,0);
            current_statement_begin__ = 23;
            int k(0);
            (void) k;  // dummy to suppress unused var warning
            stan::math::fill(k, std::numeric_limits<int>::min());
            stan::math::assign(k,i);
            current_statement_begin__ = 24;
            while (as_bool(logical_gte(get_base1(parentidx, k, "parentidx", 1), 1))) {
                current_statement_begin__ = 25;
                stan::math::assign(k, get_base1(parentidx, k, "parentidx", 1));
                current_statement_begin__ = 26;
                stan::math::assign(tmp, (tmp + x_to_t2(x, parentidx, xidx, tip_min_age, t, k, pstream__)));
            }
            current_statement_begin__ = 28;
            if (as_bool(logical_gte(get_base1(xidx, i, "xidx", 1), 1))) {
                current_statement_begin__ = 30;
                stan::math::assign(factor, (get_base1(tip_min_age, i, "tip_min_age", 1) - tmp));
                current_statement_begin__ = 32;
                return stan::math::promote_scalar<fun_return_scalar_t__>((get_base1(x, get_base1(xidx, i, "xidx", 1), "x", 1) * factor));
            } else {
                current_statement_begin__ = 35;
                return stan::math::promote_scalar<fun_return_scalar_t__>((get_base1(tip_min_age, i, "tip_min_age", 1) - tmp));
            }
            }
        }
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct x_to_t2_functor__ {
    template <typename T0__, typename T3__, typename T4__>
        typename boost::math::tools::promote_args<T0__, T3__, T4__>::type
    operator()(const std::vector<T0__>& x,
            const std::vector<int>& parentidx,
            const std::vector<int>& xidx,
            const std::vector<T3__>& tip_min_age,
            const std::vector<T4__>& t,
            const int& i, std::ostream* pstream__) const {
        return x_to_t2(x, parentidx, xidx, tip_min_age, t, i, pstream__);
    }
};
template <typename T0__, typename T3__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T3__>::type, Eigen::Dynamic, 1>
x_to_t(const std::vector<T0__>& x,
           const std::vector<int>& parentidx,
           const std::vector<int>& xidx,
           const std::vector<T3__>& tip_min_age,
           const int& n, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 43;
        int N(0);
        (void) N;  // dummy to suppress unused var warning
        stan::math::fill(N, std::numeric_limits<int>::min());
        stan::math::assign(N,n);
        current_statement_begin__ = 44;
        validate_non_negative_index("t", "N", N);
        std::vector<local_scalar_t__  > t(N, local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(t, DUMMY_VAR__);
        stan::math::fill(t, DUMMY_VAR__);
        current_statement_begin__ = 45;
        for (int i = 1; i <= N; ++i) {
            current_statement_begin__ = 46;
            stan::model::assign(t, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        -(1), 
                        "assigning variable t");
        }
        current_statement_begin__ = 48;
        for (int i = 1; i <= N; ++i) {
            current_statement_begin__ = 49;
            stan::model::assign(t, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        x_to_t2(x, parentidx, xidx, tip_min_age, t, i, pstream__), 
                        "assigning variable t");
        }
        current_statement_begin__ = 51;
        return stan::math::promote_scalar<fun_return_scalar_t__>(to_vector(t));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct x_to_t_functor__ {
    template <typename T0__, typename T3__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T3__>::type, Eigen::Dynamic, 1>
    operator()(const std::vector<T0__>& x,
           const std::vector<int>& parentidx,
           const std::vector<int>& xidx,
           const std::vector<T3__>& tip_min_age,
           const int& n, std::ostream* pstream__) const {
        return x_to_t(x, parentidx, xidx, tip_min_age, n, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type, Eigen::Dynamic, 1>
logisticMean(const T0__& L,
                 const T1__& k,
                 const T2__& midpoint,
                 const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& a,
                 const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& b, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 55;
        return stan::math::promote_scalar<fun_return_scalar_t__>(elt_divide(multiply((L / k), subtract(stan::math::log(add(1, stan::math::exp(multiply(k, subtract(b, midpoint))))), stan::math::log(add(1, stan::math::exp(multiply(k, subtract(a, midpoint))))))), subtract(b, a)));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct logisticMean_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type, Eigen::Dynamic, 1>
    operator()(const T0__& L,
                 const T1__& k,
                 const T2__& midpoint,
                 const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& a,
                 const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& b, std::ostream* pstream__) const {
        return logisticMean(L, k, midpoint, a, b, pstream__);
    }
};
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
getExtraLambdaRates(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& t,
                        const std::vector<int>& parentidx,
                        const int& N, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 59;
        local_scalar_t__ extralambda(DUMMY_VAR__);
        (void) extralambda;  // dummy to suppress unused var warning
        stan::math::initialize(extralambda, DUMMY_VAR__);
        stan::math::fill(extralambda, DUMMY_VAR__);
        stan::math::assign(extralambda,149.1968140);
        current_statement_begin__ = 60;
        local_scalar_t__ kg(DUMMY_VAR__);
        (void) kg;  // dummy to suppress unused var warning
        stan::math::initialize(kg, DUMMY_VAR__);
        stan::math::fill(kg, DUMMY_VAR__);
        stan::math::assign(kg,-(50.0161248));
        current_statement_begin__ = 61;
        local_scalar_t__ mp(DUMMY_VAR__);
        (void) mp;  // dummy to suppress unused var warning
        stan::math::initialize(mp, DUMMY_VAR__);
        stan::math::fill(mp, DUMMY_VAR__);
        stan::math::assign(mp,0.2246393);
        current_statement_begin__ = 62;
        local_scalar_t__ ct(DUMMY_VAR__);
        (void) ct;  // dummy to suppress unused var warning
        stan::math::initialize(ct, DUMMY_VAR__);
        stan::math::fill(ct, DUMMY_VAR__);
        stan::math::assign(ct,0);
        current_statement_begin__ = 63;
        int k(0);
        (void) k;  // dummy to suppress unused var warning
        stan::math::fill(k, std::numeric_limits<int>::min());
        current_statement_begin__ = 64;
        validate_non_negative_index("t0", "N", N);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> t0(N);
        stan::math::initialize(t0, DUMMY_VAR__);
        stan::math::fill(t0, DUMMY_VAR__);
        current_statement_begin__ = 66;
        for (int i = 1; i <= N; ++i) {
            current_statement_begin__ = 67;
            stan::model::assign(t0, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        -(1), 
                        "assigning variable t0");
        }
        current_statement_begin__ = 69;
        for (int i = 1; i <= N; ++i) {
            current_statement_begin__ = 70;
            stan::math::assign(k, get_base1(parentidx, i, "parentidx", 1));
            current_statement_begin__ = 71;
            stan::math::assign(ct, 0.0);
            current_statement_begin__ = 72;
            while (as_bool(logical_gt(k, 0))) {
                current_statement_begin__ = 73;
                if (as_bool(logical_gt(get_base1(t0, k, "t0", 1), 0))) {
                    current_statement_begin__ = 74;
                    stan::math::assign(ct, ((ct + get_base1(t0, k, "t0", 1)) + get_base1(t, k, "t", 1)));
                    current_statement_begin__ = 75;
                    stan::math::assign(k, -(1));
                } else {
                    current_statement_begin__ = 77;
                    stan::math::assign(ct, (ct + get_base1(t, k, "t", 1)));
                    current_statement_begin__ = 78;
                    stan::math::assign(k, get_base1(parentidx, k, "parentidx", 1));
                }
            }
            current_statement_begin__ = 82;
            stan::model::assign(t0, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        ct, 
                        "assigning variable t0");
        }
        current_statement_begin__ = 84;
        for (int i = 1; i <= N; ++i) {
            current_statement_begin__ = 85;
            if (as_bool(logical_lt(get_base1(t0, i, "t0", 1), 0))) {
                current_statement_begin__ = 86;
                std::stringstream errmsg_stream__;
                errmsg_stream__ << "x must not be negative; found x=";
                errmsg_stream__ << get_base1(t0, i, "t0", 1);
                throw std::domain_error(errmsg_stream__.str());
            }
        }
        current_statement_begin__ = 90;
        return stan::math::promote_scalar<fun_return_scalar_t__>(logisticMean(extralambda, kg, mp, t0, add(t0, t), pstream__));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct getExtraLambdaRates_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& t,
                        const std::vector<int>& parentidx,
                        const int& N, std::ostream* pstream__) const {
        return getExtraLambdaRates(t, parentidx, N, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_nb_tree : public prob_grad {
private:
        int N;
        int NINT;
        int NLAMBDA;
        std::vector<int> parentidx;
        std::vector<int> xidx;
        std::vector<double> tip_min_age;
        std::vector<int> rates;
        std::vector<int> ratesp;
        vector_d s;
        std::vector<int> m;
        std::vector<int> nh;
        vector_d q;
        vector_d concentration;
        std::vector<int> idxcrossover;
        double lambda_est;
        double early_growth_model_on;
public:
    model_nb_tree(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_nb_tree(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_nb_tree_namespace::model_nb_tree";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 98;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            current_statement_begin__ = 99;
            context__.validate_dims("data initialization", "NINT", "int", context__.to_vec());
            NINT = int(0);
            vals_i__ = context__.vals_i("NINT");
            pos__ = 0;
            NINT = vals_i__[pos__++];
            current_statement_begin__ = 100;
            context__.validate_dims("data initialization", "NLAMBDA", "int", context__.to_vec());
            NLAMBDA = int(0);
            vals_i__ = context__.vals_i("NLAMBDA");
            pos__ = 0;
            NLAMBDA = vals_i__[pos__++];
            current_statement_begin__ = 101;
            validate_non_negative_index("parentidx", "N", N);
            context__.validate_dims("data initialization", "parentidx", "int", context__.to_vec(N));
            parentidx = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("parentidx");
            pos__ = 0;
            size_t parentidx_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < parentidx_k_0_max__; ++k_0__) {
                parentidx[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 102;
            validate_non_negative_index("xidx", "N", N);
            context__.validate_dims("data initialization", "xidx", "int", context__.to_vec(N));
            xidx = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("xidx");
            pos__ = 0;
            size_t xidx_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < xidx_k_0_max__; ++k_0__) {
                xidx[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 103;
            validate_non_negative_index("tip_min_age", "N", N);
            context__.validate_dims("data initialization", "tip_min_age", "double", context__.to_vec(N));
            tip_min_age = std::vector<double>(N, double(0));
            vals_r__ = context__.vals_r("tip_min_age");
            pos__ = 0;
            size_t tip_min_age_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < tip_min_age_k_0_max__; ++k_0__) {
                tip_min_age[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 104;
            validate_non_negative_index("rates", "N", N);
            context__.validate_dims("data initialization", "rates", "int", context__.to_vec(N));
            rates = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("rates");
            pos__ = 0;
            size_t rates_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < rates_k_0_max__; ++k_0__) {
                rates[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 105;
            validate_non_negative_index("ratesp", "N", N);
            context__.validate_dims("data initialization", "ratesp", "int", context__.to_vec(N));
            ratesp = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("ratesp");
            pos__ = 0;
            size_t ratesp_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < ratesp_k_0_max__; ++k_0__) {
                ratesp[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 106;
            validate_non_negative_index("s", "N", N);
            context__.validate_dims("data initialization", "s", "vector_d", context__.to_vec(N));
            s = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("s");
            pos__ = 0;
            size_t s_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < s_j_1_max__; ++j_1__) {
                s(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 107;
            validate_non_negative_index("m", "N", N);
            context__.validate_dims("data initialization", "m", "int", context__.to_vec(N));
            m = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("m");
            pos__ = 0;
            size_t m_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < m_k_0_max__; ++k_0__) {
                m[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 108;
            validate_non_negative_index("nh", "NINT", NINT);
            context__.validate_dims("data initialization", "nh", "int", context__.to_vec(NINT));
            nh = std::vector<int>(NINT, int(0));
            vals_i__ = context__.vals_i("nh");
            pos__ = 0;
            size_t nh_k_0_max__ = NINT;
            for (size_t k_0__ = 0; k_0__ < nh_k_0_max__; ++k_0__) {
                nh[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 109;
            validate_non_negative_index("q", "NINT", NINT);
            context__.validate_dims("data initialization", "q", "vector_d", context__.to_vec(NINT));
            q = Eigen::Matrix<double, Eigen::Dynamic, 1>(NINT);
            vals_r__ = context__.vals_r("q");
            pos__ = 0;
            size_t q_j_1_max__ = NINT;
            for (size_t j_1__ = 0; j_1__ < q_j_1_max__; ++j_1__) {
                q(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 110;
            validate_non_negative_index("concentration", "NINT", NINT);
            context__.validate_dims("data initialization", "concentration", "vector_d", context__.to_vec(NINT));
            concentration = Eigen::Matrix<double, Eigen::Dynamic, 1>(NINT);
            vals_r__ = context__.vals_r("concentration");
            pos__ = 0;
            size_t concentration_j_1_max__ = NINT;
            for (size_t j_1__ = 0; j_1__ < concentration_j_1_max__; ++j_1__) {
                concentration(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 111;
            validate_non_negative_index("idxcrossover", "(NLAMBDA - 1)", (NLAMBDA - 1));
            context__.validate_dims("data initialization", "idxcrossover", "int", context__.to_vec((NLAMBDA - 1)));
            idxcrossover = std::vector<int>((NLAMBDA - 1), int(0));
            vals_i__ = context__.vals_i("idxcrossover");
            pos__ = 0;
            size_t idxcrossover_k_0_max__ = (NLAMBDA - 1);
            for (size_t k_0__ = 0; k_0__ < idxcrossover_k_0_max__; ++k_0__) {
                idxcrossover[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 112;
            context__.validate_dims("data initialization", "lambda_est", "double", context__.to_vec());
            lambda_est = double(0);
            vals_r__ = context__.vals_r("lambda_est");
            pos__ = 0;
            lambda_est = vals_r__[pos__++];
            current_statement_begin__ = 113;
            context__.validate_dims("data initialization", "early_growth_model_on", "double", context__.to_vec());
            early_growth_model_on = double(0);
            vals_r__ = context__.vals_r("early_growth_model_on");
            pos__ = 0;
            early_growth_model_on = vals_r__[pos__++];
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 117;
            validate_non_negative_index("x", "NINT", NINT);
            num_params_r__ += (1 * NINT);
            current_statement_begin__ = 119;
            validate_non_negative_index("lambda", "NLAMBDA", NLAMBDA);
            num_params_r__ += NLAMBDA;
            current_statement_begin__ = 120;
            validate_non_negative_index("x0", "(NLAMBDA - 1)", (NLAMBDA - 1));
            num_params_r__ += (1 * (NLAMBDA - 1));
            current_statement_begin__ = 121;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_nb_tree() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 117;
        if (!(context__.contains_r("x")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable x missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("x");
        pos__ = 0U;
        validate_non_negative_index("x", "NINT", NINT);
        context__.validate_dims("parameter initialization", "x", "double", context__.to_vec(NINT));
        std::vector<double> x(NINT, double(0));
        size_t x_k_0_max__ = NINT;
        for (size_t k_0__ = 0; k_0__ < x_k_0_max__; ++k_0__) {
            x[k_0__] = vals_r__[pos__++];
        }
        size_t x_i_0_max__ = NINT;
        for (size_t i_0__ = 0; i_0__ < x_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lub_unconstrain(0.0001, 0.9999, x[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable x: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 119;
        if (!(context__.contains_r("lambda")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lambda missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lambda");
        pos__ = 0U;
        validate_non_negative_index("lambda", "NLAMBDA", NLAMBDA);
        context__.validate_dims("parameter initialization", "lambda", "vector_d", context__.to_vec(NLAMBDA));
        Eigen::Matrix<double, Eigen::Dynamic, 1> lambda(NLAMBDA);
        size_t lambda_j_1_max__ = NLAMBDA;
        for (size_t j_1__ = 0; j_1__ < lambda_j_1_max__; ++j_1__) {
            lambda(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lub_unconstrain(1, 200, lambda);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lambda: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 120;
        if (!(context__.contains_r("x0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable x0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("x0");
        pos__ = 0U;
        validate_non_negative_index("x0", "(NLAMBDA - 1)", (NLAMBDA - 1));
        context__.validate_dims("parameter initialization", "x0", "double", context__.to_vec((NLAMBDA - 1)));
        std::vector<double> x0((NLAMBDA - 1), double(0));
        size_t x0_k_0_max__ = (NLAMBDA - 1);
        for (size_t k_0__ = 0; k_0__ < x0_k_0_max__; ++k_0__) {
            x0[k_0__] = vals_r__[pos__++];
        }
        size_t x0_i_0_max__ = (NLAMBDA - 1);
        for (size_t i_0__ = 0; i_0__ < x0_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lub_unconstrain(0, 1, x0[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable x0: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 121;
        if (!(context__.contains_r("k")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable k missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("k");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "k", "double", context__.to_vec());
        double k(0);
        k = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, k);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable k: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 117;
            std::vector<local_scalar_t__> x;
            size_t x_d_0_max__ = NINT;
            x.reserve(x_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < x_d_0_max__; ++d_0__) {
                if (jacobian__)
                    x.push_back(in__.scalar_lub_constrain(0.0001, 0.9999, lp__));
                else
                    x.push_back(in__.scalar_lub_constrain(0.0001, 0.9999));
            }
            current_statement_begin__ = 119;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lambda;
            (void) lambda;  // dummy to suppress unused var warning
            if (jacobian__)
                lambda = in__.vector_lub_constrain(1, 200, NLAMBDA, lp__);
            else
                lambda = in__.vector_lub_constrain(1, 200, NLAMBDA);
            current_statement_begin__ = 120;
            std::vector<local_scalar_t__> x0;
            size_t x0_d_0_max__ = (NLAMBDA - 1);
            x0.reserve(x0_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < x0_d_0_max__; ++d_0__) {
                if (jacobian__)
                    x0.push_back(in__.scalar_lub_constrain(0, 1, lp__));
                else
                    x0.push_back(in__.scalar_lub_constrain(0, 1));
            }
            current_statement_begin__ = 121;
            local_scalar_t__ k;
            (void) k;  // dummy to suppress unused var warning
            if (jacobian__)
                k = in__.scalar_lb_constrain(0, lp__);
            else
                k = in__.scalar_lb_constrain(0);
            // model body
            {
            current_statement_begin__ = 125;
            validate_non_negative_index("t", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> t(N);
            stan::math::initialize(t, DUMMY_VAR__);
            stan::math::fill(t, DUMMY_VAR__);
            current_statement_begin__ = 126;
            validate_non_negative_index("t0", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> t0(N);
            stan::math::initialize(t0, DUMMY_VAR__);
            stan::math::fill(t0, DUMMY_VAR__);
            current_statement_begin__ = 127;
            validate_non_negative_index("lambda_per_branch", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lambda_per_branch(N);
            stan::math::initialize(lambda_per_branch, DUMMY_VAR__);
            stan::math::fill(lambda_per_branch, DUMMY_VAR__);
            current_statement_begin__ = 128;
            validate_non_negative_index("tmp", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> tmp(N);
            stan::math::initialize(tmp, DUMMY_VAR__);
            stan::math::fill(tmp, DUMMY_VAR__);
            current_statement_begin__ = 129;
            validate_non_negative_index("x0v", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> x0v(N);
            stan::math::initialize(x0v, DUMMY_VAR__);
            stan::math::fill(x0v, DUMMY_VAR__);
            current_statement_begin__ = 130;
            stan::math::assign(x0v, rep_vector(0.0, N));
            current_statement_begin__ = 133;
            lp_accum__.add(beta_log<propto__>(x, elt_divide(elt_multiply(concentration, q), subtract(1, q)), concentration));
            current_statement_begin__ = 135;
            lp_accum__.add(uniform_log<propto__>(x0, 0, 1));
            current_statement_begin__ = 136;
            lp_accum__.add(normal_log<propto__>(k, 0, 1));
            current_statement_begin__ = 137;
            for (int i = 1; i <= (NLAMBDA - 1); ++i) {
                current_statement_begin__ = 138;
                stan::model::assign(x0v, 
                            stan::model::cons_list(stan::model::index_uni(get_base1(idxcrossover, i, "idxcrossover", 1)), stan::model::nil_index_list()), 
                            get_base1(x0, i, "x0", 1), 
                            "assigning variable x0v");
            }
            current_statement_begin__ = 141;
            lp_accum__.add(normal_log<propto__>(lambda, lambda_est, (0.25 * lambda_est)));
            current_statement_begin__ = 142;
            stan::math::assign(t, x_to_t(x, parentidx, xidx, tip_min_age, N, pstream__));
            current_statement_begin__ = 143;
            stan::math::assign(lambda_per_branch, add(add(elt_multiply(subtract(1, x0v), stan::model::rvalue(lambda, stan::model::cons_list(stan::model::index_multi(rates), stan::model::nil_index_list()), "lambda")), elt_multiply(x0v, stan::model::rvalue(lambda, stan::model::cons_list(stan::model::index_multi(ratesp), stan::model::nil_index_list()), "lambda"))), multiply(early_growth_model_on, getExtraLambdaRates(t, parentidx, N, pstream__))));
            current_statement_begin__ = 149;
            lp_accum__.add(neg_binomial_2_log<propto__>(m, elt_multiply(elt_multiply(t, lambda_per_branch), s), divide(elt_multiply(t, lambda_per_branch), k)));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("x");
        names__.push_back("lambda");
        names__.push_back("x0");
        names__.push_back("k");
        names__.push_back("ta");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(NINT);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(NLAMBDA);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((NLAMBDA - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_nb_tree_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        std::vector<double> x;
        size_t x_d_0_max__ = NINT;
        x.reserve(x_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < x_d_0_max__; ++d_0__) {
            x.push_back(in__.scalar_lub_constrain(0.0001, 0.9999));
        }
        size_t x_k_0_max__ = NINT;
        for (size_t k_0__ = 0; k_0__ < x_k_0_max__; ++k_0__) {
            vars__.push_back(x[k_0__]);
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> lambda = in__.vector_lub_constrain(1, 200, NLAMBDA);
        size_t lambda_j_1_max__ = NLAMBDA;
        for (size_t j_1__ = 0; j_1__ < lambda_j_1_max__; ++j_1__) {
            vars__.push_back(lambda(j_1__));
        }
        std::vector<double> x0;
        size_t x0_d_0_max__ = (NLAMBDA - 1);
        x0.reserve(x0_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < x0_d_0_max__; ++d_0__) {
            x0.push_back(in__.scalar_lub_constrain(0, 1));
        }
        size_t x0_k_0_max__ = (NLAMBDA - 1);
        for (size_t k_0__ = 0; k_0__ < x0_k_0_max__; ++k_0__) {
            vars__.push_back(x0[k_0__]);
        }
        double k = in__.scalar_lb_constrain(0);
        vars__.push_back(k);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 153;
            validate_non_negative_index("ta", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> ta(N);
            stan::math::initialize(ta, DUMMY_VAR__);
            stan::math::fill(ta, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 154;
            stan::math::assign(ta, x_to_t(x, parentidx, xidx, tip_min_age, N, pstream__));
            // validate, write generated quantities
            current_statement_begin__ = 153;
            size_t ta_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < ta_j_1_max__; ++j_1__) {
                vars__.push_back(ta(j_1__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_nb_tree";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t x_k_0_max__ = NINT;
        for (size_t k_0__ = 0; k_0__ < x_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "x" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lambda_j_1_max__ = NLAMBDA;
        for (size_t j_1__ = 0; j_1__ < lambda_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t x0_k_0_max__ = (NLAMBDA - 1);
        for (size_t k_0__ = 0; k_0__ < x0_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "x0" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "k";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        size_t ta_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < ta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t x_k_0_max__ = NINT;
        for (size_t k_0__ = 0; k_0__ < x_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "x" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lambda_j_1_max__ = NLAMBDA;
        for (size_t j_1__ = 0; j_1__ < lambda_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t x0_k_0_max__ = (NLAMBDA - 1);
        for (size_t k_0__ = 0; k_0__ < x0_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "x0" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "k";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        size_t ta_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < ta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_nb_tree_namespace::model_nb_tree stan_model;
#endif
